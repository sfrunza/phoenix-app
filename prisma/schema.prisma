generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Job {
  id             Int       @id @default(autoincrement())
  movingDate     String    @map("moving_date")
  deliveryDate   String    @map("delivery_date")
  startTime      String    @map("start_time")
  service        String
  size           String
  additionalInfo String    @map("additional_info")
  status         Status    @default(PENDING)
  createdAt      DateTime  @default(now()) @map(name: "created_at")
  updatedAt      DateTime  @updatedAt @map(name: "updated_at")
  customer       User?     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId     Int?      @map("customer_id")
  addresses      Address[]
}

model Address {
  id            Int      @id @default(autoincrement())
  address       String?
  city          String?
  state         String?
  zip           String
  apt           String?
  floor         String?
  isOrigin      Boolean  @default(false)
  isDestination Boolean  @default(false)
  isPickup      Boolean  @default(false)
  isDropoff     Boolean  @default(false)
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")
  job           Job?     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId         Int?
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int?
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  firstName     String?   @map("first_name")
  lastName      String?   @map("last_name")
  name          String?
  phone         String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?   @db.VarChar(250)
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  isActive      String?   @default("1") @map("is_active") @db.Char(1)
  role          Role      @default(USER)
  jobs          Job[]
  accounts      Account[]
  sessions      Session[]

  Address Address[]
  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum Role {
  USER
  ADMIN
  CUSTOMER
}

enum Status {
  PENDING
  CONFIRMED_BY_CUSTOMER
  CONFIRMED_AND_SCHEDULED
  CANCELED
  COMPLETED
}
